name: GitHub Pages Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Inject Discord webhook (feedback)
        run: |
          WEBHOOK='${{ secrets.DISCORD_WEBHOOK }}'
          if [ -z "$WEBHOOK" ]; then
            echo "No webhook secret provided (skipping injection)"
            exit 0
          fi

          echo "Injecting feedback webhook into index.html"

          # Escapar caracteres conflictivos en la URL
          ESCAPED=$(printf '%s' "$WEBHOOK" | sed -e 's/[\/&]/\\&/g')

          echo '--- PRE (grep feedback-webhook) ---'
          grep -n 'feedback-webhook' index.html || true
          echo 'SHA256 pre:'
          sha256sum index.html || shasum -a 256 index.html || true

          # Reemplazar la meta, aunque tenga espacios o se cierre con > o />
          sed -i -E "s|<meta name=\"feedback-webhook\"[^>]*content=\"[^\"]*\"[^>]*>|<meta name=\"feedback-webhook\" content=\"$ESCAPED\" />|" index.html || echo 'Meta tag not found'

          # Verificar que realmente se inyectó
          MATCH_LINE=$(grep -n "feedback-webhook" index.html || true)
          echo "$MATCH_LINE"
          if echo "$MATCH_LINE" | grep -q "content=\"$ESCAPED\""; then
            echo "Webhook meta correctly injected (length ${#WEBHOOK})"
          else
            echo "WARNING: Webhook meta NOT injected" >&2
            exit 1
          fi

          echo '--- POST (grep feedback-webhook) ---'
          grep -n 'feedback-webhook' index.html || true
          echo 'SHA256 post:'
          sha256sum index.html || shasum -a 256 index.html || true

          # Guardar copia para análisis
          cp index.html index.after-injection.html

      - name: Upload index debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: index-after-injection
          path: index.after-injection.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Force cache invalidation
        run: |
          echo "Deployment completed. Forcing cache invalidation..."
          
          # Esperar un momento para que el deploy se propague
          sleep 10
          
          # Intentar forzar invalidación con diferentes headers
          curl -I -H "Cache-Control: no-cache" -H "Pragma: no-cache" "${{ steps.deployment.outputs.page_url }}" || true
          curl -I -H "Cache-Control: max-age=0" "${{ steps.deployment.outputs.page_url }}" || true
          
          echo "Cache invalidation attempts completed"
          
          # Verificar que la nueva versión se está sirviendo
          echo "=== PRODUCTION VERIFICATION ==="
          PROD_CONTENT=$(curl -s -H "Cache-Control: no-cache" "${{ steps.deployment.outputs.page_url }}" | grep -n 'feedback-webhook' || echo "NO_WEBHOOK_LINE")
          echo "Production webhook line: $PROD_CONTENT"
          
          PROD_BUILD=$(curl -s -H "Cache-Control: no-cache" "${{ steps.deployment.outputs.page_url }}" | grep -n 'data-build-id' || echo "NO_BUILD_ID")
          echo "Production build ID: $PROD_BUILD"
