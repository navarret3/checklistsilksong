name: GitHub Pages Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Inject Discord webhook with CDN cache busting
        run: |
          WEBHOOK='${{ secrets.DISCORD_WEBHOOK }}'
          if [ -z "$WEBHOOK" ]; then
            echo "No webhook secret provided (skipping injection)"
            exit 0
          fi

          # Generate cache busting timestamp for Fastly CDN invalidation
          CACHE_BUST="$(date +%s)-${GITHUB_SHA::8}"
          echo "CDN Cache bust ID: $CACHE_BUST"

          echo "Injecting feedback webhook into index.html"

          # Escapar caracteres conflictivos en la URL
          ESCAPED=$(printf '%s' "$WEBHOOK" | sed -e 's/[\/&]/\\&/g')

          echo '--- PRE (grep feedback-webhook) ---'
          grep -n 'feedback-webhook' index.html || true
          echo 'SHA256 pre:'
          sha256sum index.html || shasum -a 256 index.html || true

          # Add cache busting comment to force CDN refresh
          sed -i "s|</head>|<!-- CDN-BUST: $CACHE_BUST -->\n</head>|" index.html

          # Reemplazar la meta simple (sin atributos extra)
          sed -i "s|<meta name=\"feedback-webhook\" content=\"\" />|<meta name=\"feedback-webhook\" content=\"$ESCAPED\" />|" index.html || echo 'Meta tag not found'

          # Verificar que realmente se inyect칩
          MATCH_LINE=$(grep -n "feedback-webhook" index.html || true)
          echo "$MATCH_LINE"
          if echo "$MATCH_LINE" | grep -q "content=\"$ESCAPED\""; then
            echo "Webhook meta correctly injected (length ${#WEBHOOK})"
          else
            echo "WARNING: Webhook meta NOT injected" >&2
            exit 1
          fi

          echo '--- POST (grep feedback-webhook) ---'
          grep -n 'feedback-webhook' index.html || true
          echo 'SHA256 post:'
          sha256sum index.html || shasum -a 256 index.html || true

          # Guardar copia para an치lisis
          cp index.html index.after-injection.html

      - name: Upload index debug artifact
        uses: actions/upload-artifact@v4
        with:
          name: index-after-injection
          path: index.after-injection.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Force Fastly CDN cache invalidation
        run: |
          echo "Deployment completed. Forcing Fastly CDN cache invalidation..."
          
          # Esperar a que el deploy se propague a GitHub
          sleep 15
          
          # Multiple CDN cache invalidation strategies
          DOMAIN="https://checklistsilksong.com"
          
          echo "=== Strategy 1: Aggressive cache headers ==="
          curl -I -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" -H "Expires: 0" "$DOMAIN/" || true
          
          echo "=== Strategy 2: Force refetch with timestamp ==="
          TIMESTAMP=$(date +%s)
          curl -I "$DOMAIN/?cb=$TIMESTAMP" || true
          
          echo "=== Strategy 3: HEAD requests to warm CDN ==="
          for i in {1..3}; do
            curl -I -H "Cache-Control: max-age=0" "$DOMAIN/" || true
            sleep 2
          done
          
          # Verificar que la nueva versi칩n se est치 sirviendo
          echo "=== PRODUCTION VERIFICATION ==="
          PROD_CONTENT=$(curl -s -H "Cache-Control: no-cache" "${{ steps.deployment.outputs.page_url }}" | grep -n 'feedback-webhook' || echo "NO_WEBHOOK_LINE")
          echo "Production webhook line: $PROD_CONTENT"
          
          PROD_BUILD=$(curl -s -H "Cache-Control: no-cache" "${{ steps.deployment.outputs.page_url }}" | grep -n 'data-build-id' || echo "NO_BUILD_ID")
          echo "Production build ID: $PROD_BUILD"
